import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#1 Intro to Matplotlib

#1
def make_sine_wave(x, A, w):
    return A * np.sin(w * x)

#2
x = np.linspace(0, 2 * np.pi, 1000)

#3
amplitudes = [0.5, 1, 1.5, 2, 2.5]
frequencies = [1, 2, 3, 4, 5]

#4
plt.figure(figsize=(10, 6))

#5
for A, w in zip(amplitudes, frequencies):
    y = make_sine_wave(x, A, w)
    plt.plot(x, y, label=f"A = {A}, w = {w}")

#6
plt.title("Multiple Sine Waves")
plt.xlabel("x")
plt.ylabel("y = A·sin(w·x)")
plt.legend()
plt.grid(True)
plt.show()


#2 Data with Pandas

#1
df = pd.read_csv("stars.csv")

#2
print("First 5 rows:")
print(df.head())

print("\nNumber of rows and columns:")
print(df.shape)

print("\nColumn names and data types:")
print(df.dtypes)

#3
avg_mass = df["Mass"].mean()
avg_temp = df["Temperature"].mean()
largest_radius_star = df.loc[df["Radius"].idxmax()]
num_m_type_stars = df["Spectral Type"].str.startswith("M").sum()

print(f"\nAverage Mass: {avg_mass}")
print(f"Average Temperature: {avg_temp}")
print("\nStar with Largest Radius:")
print(largest_radius_star)
print(f"\nNumber of M-type stars: {num_m_type_stars}")

#4
closest_stars = df.sort_values(by="Distance").head(3)
print("\nThree Closest Stars:")
print(closest_stars)

#5
m_type_stars = df[df["Spectral Type"].str.startswith("M")]
m_type_stars.to_csv("m_type_stars.csv", index=False)
print("\nSaved M-type stars to m_type_stars.csv")


#3 Seaborn

import seaborn as sns
import matplotlib.pyplot as plt

#1 
penguins = sns.load_dataset("penguins")

#2
fig, axes = plt.subplots(1, 2, figsize=(12, 5))  

#3
sns.scatterplot(
    data=penguins,
    x="flipper_length_mm",
    y="body_mass_g",
    hue="species",
    ax=axes[0]
)
axes[0].set_title("Flipper Length vs Body Mass")
axes[0].set_xlabel("Flipper Length (mm)")
axes[0].set_ylabel("Body Mass (g)")
axes[0].legend(title="Species")

#4
sns.histplot(
    data=penguins,
    x="body_mass_g",
    kde=True,  # optional: smooths the curve
    ax=axes[1]
)
axes[1].set_title("Distribution of Body Mass")
axes[1].set_xlabel("Body Mass (g)")
axes[1].set_ylabel("Count")

# Display the plots
plt.tight_layout()
plt.show()
